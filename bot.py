import logging
import sqlite3, datetime, os

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import (
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.utils.callback_data import CallbackData

# ====== –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather ======
API_TOKEN = "7598191280:AAH8Fowm7Vj57XBkrxsHsoPfku__3MqcrAQ"
# ====================================

# –õ–æ–≥–∏ —É—Ä–æ–≤–Ω—è INFO
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
os.makedirs("uploads", exist_ok=True)

# CallbackData –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫: act:action:project:job
cb = CallbackData("act", "action", "project", "job")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect("data.sqlite")
    c = conn.cursor()
    c.execute('''
      CREATE TABLE IF NOT EXISTS projects(
        id INTEGER PRIMARY KEY,
        client TEXT,
        moto TEXT,
        photo TEXT,
        created TEXT
      )
    ''')
    c.execute('''
      CREATE TABLE IF NOT EXISTS jobs(
        id INTEGER PRIMARY KEY,
        project_id INTEGER,
        desc TEXT,
        cost INTEGER,
        done INTEGER
      )
    ''')
    c.execute('''
      CREATE TABLE IF NOT EXISTS payments(
        id INTEGER PRIMARY KEY,
        job_id INTEGER,
        amount INTEGER,
        paid_at TEXT
      )
    ''')
    conn.commit()
    conn.close()

init_db()


# –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞

@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", "üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫—É—é!", reply_markup=kb)


@dp.message_handler(lambda m: m.text == "‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
async def new_project_start(msg: types.Message):
    await msg.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –º–æ—Ç–æ—Ü–∏–∫–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "–ò–≤–∞–Ω–æ–≤, Harley-Sportster 2021"
    )
    await dp.current_state(chat=msg.chat.id, user=msg.from_user.id).set_state("WAIT_PROJECT")


@dp.message_handler(lambda m: dp.current_state(chat=m.chat.id, user=m.from_user.id).is_state("WAIT_PROJECT"))
async def new_project_save(msg: types.Message):
    parts = msg.text.split(",", 1)
    if len(parts) != 2:
        return await msg.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:\n–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞, –ú–æ—Ç–æ—Ü–∏–∫–ª")
    client, moto = parts[0].strip(), parts[1].strip()

    conn = sqlite3.connect("data.sqlite")
    c = conn.cursor()
    c.execute(
        "INSERT INTO projects(client,moto,created) VALUES(?,?,?)",
        (client, moto, datetime.datetime.now().isoformat())
    )
    pid = c.lastrowid
    conn.commit()
    conn.close()

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", "üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
    await msg.answer(f"–ü—Ä–æ–µ–∫—Ç #{pid} —Å–æ–∑–¥–∞–Ω: {client} ‚Äî {moto}", reply_markup=kb)
    await dp.current_state(chat=msg.chat.id, user=msg.from_user.id).reset_state()


@dp.message_handler(lambda m: m.text == "üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
async def list_projects(msg: types.Message):
    conn = sqlite3.connect("data.sqlite")
    rows = conn.cursor().execute("SELECT id, client, moto FROM projects").fetchall()
    conn.close()

    if not rows:
        return await msg.answer("–ü—Ä–æ–µ–∫—Ç–æ–≤ –µ—â—ë –Ω–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–µ—Ä–µ–∑ ¬´‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç¬ª")

    kb = InlineKeyboardMarkup(row_width=1)
    for pid, client, moto in rows:
        kb.insert(
            InlineKeyboardButton(
                f"#{pid}: {client} ‚Äî {moto}",
                callback_data=cb.new(action="view", project=pid, job=0)
            )
        )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=kb)


@dp.callback_query_handler(cb.filter(action="view"))
async def callback_view(cbq: types.CallbackQuery, callback_data: dict):
    pid = int(callback_data["project"])
    conn = sqlite3.connect("data.sqlite")
    cur = conn.cursor()
    proj = cur.execute(
        "SELECT client, moto FROM projects WHERE id=?", (pid,)
    ).fetchone()
    jobs = cur.execute(
        "SELECT id, desc, cost, done FROM jobs WHERE project_id=?", (pid,)
    ).fetchall()
    conn.close()

    text = f"–ü—Ä–æ–µ–∫—Ç #{pid}: {proj[0]} ‚Äî {proj[1]}\n\n–†–∞–±–æ—Ç—ã:\n"
    if jobs:
        for j in jobs:
            status = "‚úÖ" if j[3] else "‚ùå"
            text += f"- #{j[0]} {j[1]} ({j[2]}‚ÇΩ) {status}\n"
    else:
        text += "‚Äî –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç\n"

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            callback_data=cb.new(action="add_job", project=pid, job=0)
        ),
        InlineKeyboardButton(
            "üìå –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç",
            callback_data=cb.new(action="pay_status", project=pid, job=0)
        )
    )
    await cbq.message.edit_text(text, reply_markup=kb)
    await cbq.answer()


# –î–æ–±–∞–≤—å—Ç–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
