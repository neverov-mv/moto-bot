from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.utils.callback_data import CallbackData
from aiogram.utils import executor
import sqlite3, datetime, os, logging

API_TOKEN = "7598191280:AAH8Fowm7Vj57XBkrxsHsoPfku__3MqcrAQ"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ... (init_db —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ)

cb = CallbackData("act", "action", "project", "job")

@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", "üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫—É—é!", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
async def new_project_start(msg: types.Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –º–æ—Ç–æ—Ü–∏–∫–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n–ò–≤–∞–Ω–æ–≤, Harley 2021")
    await state.set_state("WAIT_PROJECT")

@dp.message_handler(state="WAIT_PROJECT", content_types=types.Text)
async def new_project_save(msg: types.Message, state: FSMContext):
    # (–∫–æ–¥ –∫–∞–∫ –≤—ã—à–µ)
    await state.finish()

@dp.message_handler(lambda m: m.text == "üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", state="*")
async def list_projects(msg: types.Message):
    # –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤

@dp.callback_query_handler(cb.filter(action="add_job"))
async def callback_add_job(cbq: types.CallbackQuery, callback_data: dict, state: FSMContext):
    # (–∫–æ–¥ –∫–∞–∫ –≤—ã—à–µ)

@dp.message_handler(state=lambda s: s and s.startswith("JOB_"), content_types=types.Text)
async def state_save_job(msg: types.Message, state: FSMContext):
    # (–∫–æ–¥ –∫–∞–∫ –≤—ã—à–µ)

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
