import logging
import sqlite3
import datetime
import os

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# ====== –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather (–ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è) ======
API_TOKEN = "7598191280:AAH8Fowm7Vj57XBkrxsHsoPfku__3MqcrAQ"
# ==============================================================================

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –î–ª—è inline-–∫–Ω–æ–ø–æ–∫: act:action:project:job
cb = CallbackData("act", "action", "project", "job")

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class ProjectForm(StatesGroup):
    waiting_for_project = State()

class JobForm(StatesGroup):
    waiting_for_job = State()

# –ü–∞–ø–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è)
os.makedirs("uploads", exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite-–±–∞–∑—ã
def init_db():
    conn = sqlite3.connect("data.sqlite")
    c = conn.cursor()
    c.execute('''
      CREATE TABLE IF NOT EXISTS projects(
        id INTEGER PRIMARY KEY,
        client TEXT,
        moto TEXT,
        created TEXT
      )
    ''')
    c.execute('''
      CREATE TABLE IF NOT EXISTS jobs(
        id INTEGER PRIMARY KEY,
        project_id INTEGER,
        description TEXT,
        cost INTEGER,
        done INTEGER
      )
    ''')
    c.execute('''
      CREATE TABLE IF NOT EXISTS payments(
        id INTEGER PRIMARY KEY,
        job_id INTEGER,
        amount INTEGER,
        paid_at TEXT
      )
    ''')
    conn.commit()
    conn.close()

init_db()

# --- /start –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", "üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫—É—é!", reply_markup=kb)

# --- –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ---
@dp.message_handler(lambda m: m.text == "‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", state="*")
async def new_project_start(msg: types.Message):
    await msg.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –º–æ—Ç–æ—Ü–∏–∫–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, Harley-Sportster 2021"
    )
    await ProjectForm.waiting_for_project.set()

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ë–î ---
@dp.message_handler(state=ProjectForm.waiting_for_project, content_types=types.Text)
async def new_project_save(msg: types.Message, state: FSMContext):
    parts = msg.text.split(",", 1)
    if len(parts) != 2:
        return await msg.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:\n–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞, –ú–æ—Ç–æ—Ü–∏–∫–ª"
        )
    client, moto = parts[0].strip(), parts[1].strip()

    conn = sqlite3.connect("data.sqlite")
    c = conn.cursor()
    c.execute(
        "INSERT INTO projects(client,moto,created) VALUES(?,?,?)",
        (client, moto, datetime.datetime.now().isoformat())
    )
    pid = c.lastrowid
    conn.commit()
    conn.close()

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", "üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
    await msg.answer(f"‚úÖ –ü—Ä–æ–µ–∫—Ç #{pid} —Å–æ–∑–¥–∞–Ω: {client} ‚Äî {moto}", reply_markup=kb)
    await state.finish()

# --- –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ ---
@dp.message_handler(lambda m: m.text == "üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", state="*")
async def list_projects(msg: types.Message):
    conn = sqlite3.connect("data.sqlite")
    rows = conn.cursor().execute(
        "SELECT id, client, moto FROM projects"
    ).fetchall()
    conn.close()

    if not rows:
        return await msg.answer("–ü—Ä–æ–µ–∫—Ç–æ–≤ –µ—â—ë –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–µ—Ä–µ–∑ ¬´‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç¬ª")

    kb = InlineKeyboardMarkup(row_width=1)
    for pid, client, moto in rows:
        kb.insert(
            InlineKeyboardButton(
                f"#{pid}: {client} ‚Äî {moto}",
                callback_data=cb.new(action="view", project=pid, job=0)
            )
        )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=kb)

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ ---
@dp.callback_query_handler(cb.filter(action="view"))
async def callback_view_project(cbq: types.CallbackQuery, callback_data: dict):
    pid = int(callback_data["project"])
    conn = sqlite3.connect("data.sqlite")
    cur = conn.cursor()
    proj = cur.execute(
        "SELECT client, moto FROM projects WHERE id=?", (pid,)
    ).fetchone()
    jobs = cur.execute(
        "SELECT id, description, cost, done FROM jobs WHERE project_id=?", (pid,)
    ).fetchall()
    conn.close()

    text = f"üìã –ü—Ä–æ–µ–∫—Ç #{pid}: {proj[0]} ‚Äî {proj[1]}\n\nüõ† –†–∞–±–æ—Ç—ã:\n"
    if jobs:
        for j in jobs:
            status = "‚úÖ" if j[3] else "‚ùå"
            text += f"- #{j[0]} {j[1]} ({j[2]}‚ÇΩ) {status}\n"
    else:
        text += "‚Äî –Ω–µ—Ç —Ä–∞–±–æ—Ç\n"

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            callback_data=cb.new(action="add_job", project=pid, job=0)
        ),
        InlineKeyboardButton(
            "üìå –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç",
            callback_data=cb.new(action="pay_status", project=pid, job=0)
        )
    )
    await cbq.message.edit_text(text, reply_markup=kb)
    await cbq.answer()

# --- –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã ---
@dp.callback_query_handler(cb.filter(action="add_job"))
async def callback_add_job(cbq: types.CallbackQuery, callback_data: dict, state: FSMContext):
    pid = int(callback_data["project"])
    await state.update_data(project_id=pid)
    await cbq.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: –ü–æ–∫—Ä–∞—Å–∫–∞ –±–∞–∫–∞, 15000"
    )
    await JobForm.waiting_for_job.set()
    await cbq.answer()

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤ –ë–î ---
@dp.message_handler(state=JobForm.waiting_for_job, content_types=types.Text)
async def state_save_job(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    pid = data.get("project_id")

    parts = msg.text.split(",", 1)
    if len(parts) != 2:
        return await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, —Ü–µ–Ω–∞")
    desc, cost = parts[0].strip(), int(parts[1].strip())

    conn = sqlite3.connect("data.sqlite")
    c = conn.cursor()
    c.execute(
        "INSERT INTO jobs(project_id,description,cost,done) VALUES(?,?,?,0)",
        (pid, desc, cost)
    )
    conn.commit()
    conn.close()

    await msg.answer(f"‚úÖ –†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É #{pid}")
    await state.finish()

# --- –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É ---
@dp.callback_query_handler(cb.filter(action="pay_status"))
async def callback_pay_status(cbq: types.CallbackQuery, callback_data: dict):
    pid = int(callback_data["project"])
    conn = sqlite3.connect("data.sqlite")
    rows = conn.cursor().execute(
        "SELECT j.id, j.description, j.cost, IFNULL(SUM(p.amount),0) "
        "FROM jobs j LEFT JOIN payments p ON j.id=p.job_id "
        "WHERE j.project_id=? GROUP BY j.id",
        (pid,)
    ).fetchall()
    conn.close()

    text = f"üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É #{pid}:\n"
    for j in rows:
        paid = j[3]
        text += f"- #{j[0]} {j[1]}: {paid}/{j[2]}‚ÇΩ\n"
    await cbq.message.answer(text)
    await cbq.answer()

# === TODO: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ done –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã ===

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
